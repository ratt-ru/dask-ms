name: Ubuntu CI

on: [push, pull_request]

env:
  POETRY_VERSION: 1.2.1

jobs:
  check_skip:
    runs-on: ubuntu-latest
    if: |
      !contains(format('{0} {1} {2}', github.event.head_commit.message, github.event.pull_request.title, github.event.pull_request.body), '[skip ci]')
    steps:
      - run: |
          cat <<'MESSAGE'
          github.event_name: ${{ toJson(github.event_name) }}
          github.event:
          ${{ toJson(github.event) }}
          MESSAGE
  lint:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Cache Installations
        id: cache-installs
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-0

      - name: Install Poetry
        if: ${{ steps.cache-poetry.outputs.cache-hit != 'true' }}
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Install dev dependencies
        run: poetry install --with dev

      - name: Lint
        run: poetry run black daskms/

  test:
    needs: check_skip
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Cache Installations
        id: cache-installs
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-0

      - name: Install Poetry
        if: ${{ steps.cache-poetry.outputs.cache-hit != 'true' }}
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install dask-ms base
        run: poetry install --extras "testing arrow zarr"

      - name: Test dask-ms base
        run: poetry run py.test -s -vvv daskms/

      - name: Install Minio Server and Client
        run: |
          mkdir -p "${HOME}/.local/bin"
          cd "${HOME}/.local/bin"
          wget -q -c https://dl.min.io/server/minio/release/linux-amd64/minio
          wget -q -c https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod a+x minio
          chmod a+x mc
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Test minio run
        run: |
          poetry run minio --help
          poetry run mc --help

      - name: Install dask-ms complete
        run: poetry install --extras "testing complete"

      - name: Test dask-ms complete
        run: poetry run py.test -s -vvv daskms/

  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    # Run on a push to a tag or master
    if: >
      github.event_name == 'push' &&
      (startsWith(github.event.ref, 'refs/tags') ||
       github.event.ref == 'refs/heads/master')

    steps:
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Install latest setuptools, wheel, pip
        run: python3 -m pip install -U pip setuptools wheel

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Build distributions
        run: python setup.py sdist bdist_wheel

      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.test_pypi_token }}
          repository_url: https://test.pypi.org/legacy/
        continue-on-error: true

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@master
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
